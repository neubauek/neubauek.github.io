[{"content":"I’ve always had a fascination with tearing things down and “pushing all the buttons” to see how they work. Something inside of me seems to natively speak machine. As a child, any time I could sit in front of relatives or friends Intel 286 and 386 computers, I would poke around the DOS command line, listing out all of the executables, reading their help text, and experimenting with their switches and parameters to find out how they work (after I made sure they weren’t going to do anything damaging). Any time I would get any free or dead consumer electronics, I would crack the case open and see what I could learn about the insides.\nMy approach towards learning now isn’t a lot different than it was when I was a kid. I’ve got more resources and access to knowledge than years ago, but I still poke and prod at accessible interfaces and command lines and pull out my spudgers and screwdrivers when seeing how a device works.\nI’m an avid maker. There’s something intensely satisfying about holding something in your hands that started as a sketch or schematic. My passions lately have been in the areas of 3D printing and electronic design and assembly.\nMy educational and career life has consisted of computer systems engineering and programming. I’ve done everything from coding integrations, applications, and architecting and deploying systems that support millions of users.\nAfter several years of success in the systems architecture and engineering area of IT, I’ve decided to transition to Information Security. I’d like to focus on embedded systems (i.e. IoT) penetration testing and reverse engineering as well as web application pen testing.\n","description":"About Kevin Neubauer","id":0,"section":"","tags":null,"title":"About","uri":"https://kevinneubauer.com/about/"},{"content":"\nIntro Listen to your intuition, especially when an idea comes to you out of nowhere and isn’t related to work in any shape or fashion. It may not make any sense at all, but hear me out and follow it (provided it doesn’t have a high probability of bodily harm). In these instances, your brain is telling you that you need to do something different, something fun, and perhaps something creative. If you don’t flex that creativity muscle every once in a while it wastes away.\nI hacked a Fischer Price See N Say toy… because… because it sounded fun I guess. The global electronic components shortage had really put a negative spin on designing new projects. Sitting down to design something meant constantly checking stock levels at many different suppliers, only to find out when you were ready to order that they were out of stock until 2045 or some other ridiculous date in the future. This supply shortage really put one of my favorite hobbies in a negative light, to the point where I didn’t want to even go near my workbench. One day that changed though. I was browsing a local thrift store looking for discarded treasures and came across a toddler toy that caused something to click in my brain. It was a more modern take on the See N Say. Perhaps it was nostalgia that started it all. I had one when I was a kid, albeit a very different See N Say. The older ones from “way back when” were made with an internal phonograph and played like a record player when you pulled the string. The newer ones are all electronic and play stored digital audio.\nBack to the thrift store… The See N Say was $2, I didn’t fully know how its internals worked, and my brain said to me, “Hack it. Make it do what you want it to do, not what it was programmed to do.” I tossed it in my cart, brought it home, and opened it up.\nThe Build Because of the global component shortage, my 2 main goals for this project were as follows:\nRe-use as much mechanical and electronics from the original toy as I could\nFor new components I would only use what I already had in my spare parts bins\nUpfront note: This build is not the cheapest, nor is it efficient or practical in any way. If I were to mass produce a “hack” I would design a custom PCB with everything on it. This article is documenting my build using the stuff I already had on hand.\nFirst up was seeing what I could re-use from the original toy. The mechanical pull string assembly was a no brainer. The toy was just not the same without it. Looking deeper at the electronics I was disappointed, but not surprised by what I saw. A speaker, battery connection, and a PCB with a circular membrane button arrangement. Looking closer at the PCB, you see some resistors, capacitors, and the dreaded black epoxy blob where a microcontroller should be.\nUnmodified See N Say Toy Insides (speaker cropped off frame) If you’re not already familiar with how cheap consumer-grade electronics are produced, a lot of engineering goes into the design of the device to squeeze costs out of large production runs. In most cases for cheap devices like this, custom silicon is designed to handle device operation rather than using an off-the-shelf component. To add insult to injury for us hackers \u0026amp; makers, the custom silicon is not encapsulated in a package with a DIP, QFN, or SOIC footprint. Instead it is wire-bonded directly to the PCB and then liberally slathered in black epoxy to the point where you can’t even see the PCB pads. Sometimes you get lucky and find debug pinouts that you can work with to reverse engineer the device. In this case though, I wasn’t so lucky. Silver lining though: It made for an easy decision to just use a different microcontroller rather than spending time trying to reverse engineer a device.\nPCB after desoldering wires and removing the button membrane So what could I re-use for this build? Not a lot…\nToy case Toy pull string assembly Speaker Button membrane Stripped down PCB To strip all the components off the PCB, I used a combination of a soldering iron with a chisel tip, a solder pump, solder braid, gel flux, tweezers, scraper/spudger, and my hot air rework station. I used the soldering iron to desolder the wire connections, desolder the electrolytic capacitors, and clean up the board after all the components were removed. I used the hot air station to remove the surface mount components and to heat up the black epoxy. Once the epoxy is heated up, gently scrape it off the board. Sometimes you get lucky… In this case, the epoxy came off really easy and clean once it was hot. You could probably remove the epoxy and surface mount components with a heat gun instead of a hot air station, but be very careful to not overheat the PCB and damage it.\nHacked See N Say PCB Components Removed At this point the PCB is only good for handling button presses. You have to hook it into a new microcontroller with wire leads to its Input/Output (I/O) pins. You could solder these wire leads to where the former microcontroller existed. However, in this case the spacing between pads (the pitch) was very small. It could be done, but would be a finicky job under a magnifying glass to solder to these pads. Instead, I decided to use the test points on the PCB. Test points are just bare copper areas that are used for automated testing in the factory. The test points on this device are in line with the copper trace from each button, likely so each button could be tested prior to finishing assembly. The catch with using these test points though is that some exist under the button membrane. I had to use really thin wire to make sure button contact could be made. I decided to use wire wrap wire for this and hot glue to hold the wires out of the way of the buttons and to minimize movement and stress breaks. You will end up with 1 wire lead for each button and 1 wire lead to feed the button assembly with voltage. The voltage supply is the ring trace that goes around all the buttons. It connects up with a spot on the bottom of the PCB where the old capacitor “C5” was. Keep track of this wire in particular, otherwise you will spend 15 minutes with a multimeter trying to find it after you’ve glued everything in a bundle. The other wires are not as critical to track. They all go to microcontroller I/O pins. If you end up with a different button arrangement, you will have to modify the device code.\nHacked See N Say Wire Leads Soldered Hacked See N Say Wire Leads Covered By Button Membrane Put the PCB back into the toy case and carefully route the wires down and around the area where the PCB sits to avoid contact with the pull string mechanical assembly that sits above the PCB. Use hot glue wherever it helps to keep the wires fixed.\nHacked See N Say Tidy Wire Leads I had an extra CircuitBrains Deluxe module on hand and decided to use it because it has 8 MB of flash, the ATSAMD51 can handle mp3 audio, and it’s a very low profile device and can fit into the toy without much fuss. Insert it into the toy and tack it lightly with hot glue. Test fit the mechanical pull string assembly to ensure it doesn’t contact what you’ve put together so far.\nConnect up the “C5” wire to the CircuitBrains “3V3” output. Connect all others to I/O pins. Avoid pin “D13” due to it being shared with an LED. The picture below shows a connection to “D13”. However, I later had to move it to “A9”.\nHacked See N Say Wire Leads to CircuitBrains Deluxe. “D13” pin is wrongly connected in this photo. Rotate the speaker so the wire leads face the outer part of the toy by unscrewing the speaker retainer and cutting out some of the yellow plastic. Insert the audio amplifier module, soldering wire leads according to the schematic at the end of this article. Tack the audio amp down lightly with hot glue. Test fit the toy mechanical assembly again. You should be doing this a lot throughout the build. It sucks to fully glue something into place and find out that the project enclosure doesn’t fit back together again or the string pull binds up. Go back at the end of assembly and fully glue everything down.\nHacked See N Say Speaker Rotated Before you get too far into the build, flip the toy case over and gut the battery compartment. Remove all the pokey bits and break out the inner plastic pieces. Be sure to file, sand, or Dremel the rough plastic. Lipo battery packs are soft-sided. If they get punctured you end up with a violent lithium fire. Drill two holes in the corner of the compartment that are big enough for the USB cable and battery pack leads to fit through. The holes should be on the side that is closest to the microcontroller and the PowerBoost module.\nHacked See N Say Gutted Battery Compartment Fit and lightly tack down the perfboard and PowerBoost module. Test fit the mechanical assembly.\nHacked See N Say Partially Finished Keep the end of the USB cable the plugs into your computer. Cut the other end off. Feed the cable through the hole you drilled. Insert the battery in the compartment and feed the battery leads through the other hole. I stuck my battery in place with double-sided foam tape. Coil up as much USB cable plus the end of the cable as will fit in the compartment with the battery when you put the compartment cover back on. Flip the toy back over and leave enough USB cable to get to both the PowerBoost module and the microcontroller, whichever is furthest away, and cut the excess off.\nHacked See N Say Battery and USB Cable Drill and then file a place to insert a slide switch. Solder wire leads to the slide switch and then glue it into place. Solder the switch leads to the PowerBoost “EN” and “GND” connections.\nHacked See N Say Inserted Switch Strip the USB cable sheathing off. If you are lucky, you have a black wire, a red wire, a green wire, and a white wire. CHANCES ARE (but never a guarantee) that the red wire is +5V and the black is GND. You should absolutely verify this if you can by plugging the cable into a USB port or USB battery pack and testing with a multimeter. Once confirmed, solder the GND wire to “GND” and +5V to “VUSB” on the PowerBoost module. As far as the white and green wires, if that is what you have, it’s a crapshoot which one is D+ and which is D-. My advice is to just solder one to the CircuitBrains D+ and the other to D-. If you end up with USB communication issues when you bring up the device to test it, then swap them around.\nConnect the PowerBoost 5V to a spot on the perfboard and another “GND” pin to another spot on the perfboard. These will serve as voltage and ground for the CircuitBrains and the audio amp. Run a 5V wire to CircuitBrains and connect it to “VIN” and a GND wire to a “GND” pin. Likewise run a 5V wire to the audio amp “VDD” and GND to “GND”.\nHot glue the USB cable sheathing to the battery compartment hole to keep it from moving. I did not hot glue the battery lead hole in case I needed to swap out the battery.\nDO NOT connect the battery to the PowerBoost module until assembly is done. The below picture shows a fully assembled project.\nHacked See N Say Adafruit PowerBoost Closeup Originally I had the CircuitBrains “A0” pin feeding directly into the audio amp. However, when testing out my build I noticed some audible noise on the audio output. I decided to construct a simple resistor capacitor (RC) filter to filter out any noise that was above the frequency of human speech. It worked amazingly well. See the schematic for the connections.\nHacked See N Say Resistor Capacitor Filter Closeup Run any missing wires, tack down wires with hot glue, and test fit the mechanical assembly again. If everything looks good, plug in the battery to the PowerBoost module and plug in the USB cable to your computer. A USB mass storage volume should appear where you can edit your “code.py” file and make your build come to life. If you’re not familiar with CircuitPython, go check it out here. My code is at the end of this article. Make changes, test, make more changes, and test some more. Once you are happy, go back and fully glue things down with hot glue. Be liberal but not overly so. If you ever need to open your device back up to work on it or disassemble it, you don’t want to be stuck working through a mountain of hot glue.\nHacked See N Say Finished Insides Put your toy back together, do some work in a photo editing program, and print out a new front graphic for it. Because of the time of year I did this build, I used some holiday songs and holiday theme. However, make it what you want. I’ll probably change this up to use different audio and make it a trivia or puzzle game after the holidays are over. Have fun and happy hacking!\nHacked See N Say Finished Brief Demo Demo using holiday music (custom print face not fully glued down) Schematic Click image to open in new tab so you can zoom in and read it.\nHacked See N Say Schematic Bill of Materials This is what I used based on what I had on hand. There are many other possibilities to reduce cost with different components or modules.\nQuantity Description Purpose Source 1 See N Say Toy Thrif stores, garage sales, etc 1 Circuit Brains Deluxe Low profile microcontroller module that can play mp3 audio https://www.adafruit.com/product/4802 1 Adafruit TPA2012 Audio Amp Amplify audio signal from microcontroller to speaker. This is a stereo module. You could use a mono module. https://www.adafruit.com/product/1552 1 Adafruit Powerboost 500 Charge Lipo battery and boost 3.7V battery output to 5V https://www.adafruit.com/product/1944 1 500 mAh Lipo Battery Battery power https://www.adafruit.com/product/1578 1 Perfboard Connections for power and ground signals. Connections for RC filter. I think I got mine from Amazon. 1 80 Ohm Resistor Part of RC noise filter Digikey, Mouser, etc 1 100 nF Capacitor Part of RC noise filter Digikey, Mouser, etc 1 USB Cable Interface with CircuitBrains Deluxe. Power signal to charge Lipo battery. Spare cables bin 1 Slide Switch On/Off switch Digikey, Mouser, etc 1 Wire Hook-up wire https://www.adafruit.com/product/3175 1 Wire Wrap Very thin wire https://www.adafruit.com/product/1446 CircuitPython Code import time import board from digitalio import DigitalInOut, Direction, Pull import digitalio from audiomp3 import MP3Decoder try: from audioio import AudioOut except ImportError: try: from audiopwmio import PWMAudioOut as AudioOut except ImportError: pass # not always supported by every board! # The listed mp3files will be played in order mp3file = \u0026#34;rudolph.mp3\u0026#34; # You have to specify some mp3 file when creating the decoder mp3 = open(mp3file, \u0026#34;rb\u0026#34;) decoder = MP3Decoder(mp3) inputMap = { \u0026#34;D12\u0026#34;: \u0026#34;rudolph.mp3\u0026#34;, \u0026#34;D14\u0026#34;: \u0026#34;rockintree.mp3\u0026#34;, \u0026#34;A10\u0026#34;: \u0026#34;joy.mp3\u0026#34;, \u0026#34;D11\u0026#34;: \u0026#34;whitechristmas.mp3\u0026#34;, \u0026#34;A9\u0026#34;: \u0026#34;beginning.mp3\u0026#34;, \u0026#34;D9\u0026#34;: \u0026#34;jinglebells.mp3\u0026#34;, \u0026#34;D7\u0026#34;: \u0026#34;frosty.mp3\u0026#34;, \u0026#34;D6\u0026#34;: \u0026#34;feliz.mp3\u0026#34;, \u0026#34;D5\u0026#34;: \u0026#34;runover.mp3\u0026#34;, \u0026#34;D3\u0026#34;: \u0026#34;peanuts.mp3\u0026#34;, \u0026#34;D4\u0026#34;: \u0026#34;letitsnow.mp3\u0026#34;, \u0026#34;D8\u0026#34;: \u0026#34;hippo.mp3\u0026#34; } def play(inputName): global audio #Use global variable global inputMap #Use global variable audio = AudioOut(board.A0) filename = inputMap[inputName] while (True): results = playAudio(filename, audio) if results == \u0026#34;\u0026#34;: break else: filename = inputMap[results] audio.deinit() def playAudio(filename, audio): time.sleep(0.2) #Sleep for button debounce # Updating the .file property of the existing decoder # helps avoid running out of memory (MemoryError exception) decoder.file = open(filename, \u0026#34;rb\u0026#34;) audio.play(decoder) print(\u0026#34;Playing\u0026#34;, filename) returnValue = \u0026#34;\u0026#34; while audio.playing: if D12.value: print(\u0026#34;D12 / 12 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D12\u0026#34; elif D14.value: print(\u0026#34;D14 / 1 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D14\u0026#34; elif A10.value: print(\u0026#34;A10 / 2 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;A10\u0026#34; elif D11.value: print(\u0026#34;D11 / 3 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D11\u0026#34; elif A9.value: print(\u0026#34;A9 / 4 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;A9\u0026#34; elif D9.value: print(\u0026#34;D9 / 5 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D9\u0026#34; elif D7.value: print(\u0026#34;D7 / 6 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D7\u0026#34; elif D6.value: print(\u0026#34;D6 / 7 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D6\u0026#34; elif D5.value: print(\u0026#34;D5 / 8 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D5\u0026#34; elif D3.value: print(\u0026#34;D3 / 9 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D3\u0026#34; elif D4.value: print(\u0026#34;D4 / 10 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D4\u0026#34; elif D8.value: print(\u0026#34;D8 / 11 O\u0026#39;Clock pressed\u0026#34;) audio.stop() print(\u0026#34;Stopped\u0026#34;, filename) returnValue = \u0026#34;D8\u0026#34; else: pass print(\u0026#34;Finished\u0026#34;, filename) return returnValue A10 = DigitalInOut(board.A10) A10.direction = Direction.INPUT A10.switch_to_input(pull=Pull.DOWN) D14 = DigitalInOut(board.D14) D14.direction = Direction.INPUT D14.switch_to_input(pull=Pull.DOWN) A9 = DigitalInOut(board.A9) A9.direction = Direction.INPUT A9.switch_to_input(pull=Pull.DOWN) D12 = DigitalInOut(board.D12) D12.direction = Direction.INPUT D12.switch_to_input(pull=Pull.DOWN) D11 = DigitalInOut(board.D11) D11.direction = Direction.INPUT D11.switch_to_input(pull=Pull.DOWN) D9 = DigitalInOut(board.D9) D9.direction = Direction.INPUT D9.switch_to_input(pull=Pull.DOWN) D8 = DigitalInOut(board.D8) D8.direction = Direction.INPUT D8.switch_to_input(pull=Pull.DOWN) D7 = DigitalInOut(board.D7) D7.direction = Direction.INPUT D7.switch_to_input(pull=Pull.DOWN) D6 = DigitalInOut(board.D6) D6.direction = Direction.INPUT D6.switch_to_input(pull=Pull.DOWN) D5 = DigitalInOut(board.D5) D5.direction = Direction.INPUT D5.switch_to_input(pull=Pull.DOWN) D4 = DigitalInOut(board.D4) D4.direction = Direction.INPUT D4.switch_to_input(pull=Pull.DOWN) D3 = DigitalInOut(board.D3) D3.direction = Direction.INPUT D3.switch_to_input(pull=Pull.DOWN) while True: if D12.value: print(\u0026#34;D12 / 12 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D12\u0026#34;) if D14.value: print(\u0026#34;D14 / 1 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D14\u0026#34;) if A10.value: print(\u0026#34;A10 / 2 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;A10\u0026#34;) if D11.value: print(\u0026#34;D11 / 3 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D11\u0026#34;) if A9.value: print(\u0026#34;A9 / 4 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;A9\u0026#34;) if D9.value: print(\u0026#34;D9 / 5 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D9\u0026#34;) if D7.value: print(\u0026#34;D7 / 6 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D7\u0026#34;) if D6.value: print(\u0026#34;D6 / 7 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D6\u0026#34;) if D5.value: print(\u0026#34;D5 / 8 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D5\u0026#34;) if D3.value: print(\u0026#34;D3 / 9 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D3\u0026#34;) if D4.value: print(\u0026#34;D4 / 10 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D4\u0026#34;) if D8.value: print(\u0026#34;D8 / 11 O\u0026#39;Clock pressed\u0026#34;) play(\u0026#34;D8\u0026#34;) ","description":"A See 'N Say toy is repurposed to play Christmas music clips.","id":1,"section":"projects","tags":["CircuitBrains","CircuitPython","project","electronics","hardware","hardware hacking","toy"],"title":"Hacked See 'N Say Toy","uri":"https://kevinneubauer.com/projects/hacked-see-n-say-toy/"},{"content":"\nI picked up a cheap See ‘N Say toy at a thrift store a while back. I decided I would so something fun with it, which will hopefully make it into its own post after finishing it. At first I wondered about doing something with the audio clips that were stored on the toy. Of course, after opening it up there’s a big blob of black epoxy over the microcontroller. This makes reverse engineering it to dump the stored audio bits too much of a challenge.\nRather than give up, I decided I would put together a solution that’s good enough. I used a simple voltage divider with a potentiometer on one side to make adjustments to the audio output signal. I hooked the output of the speakers up to one end of the voltage divider and on the other end is a TRRS 3.5mm headphone jack breakout. The + from the speaker output is hooked up to the microphone ring on the jack and the – is hooked up to the ground.\nFor people wanting to follow along at home, there is no schematic for all situations. Each toy could have a different level of amplification or voltage output. Likewise each microphone input could have different expectations for voltage input level. I ended up using a 512K potentiometer and a 10K resistor. It’s very important to measure the voltage output to the speakers to determine how much resistance is needed to drop the voltage to a level suitable for a microphone input. You could end up damaging sensitive microphone electronics if you fed too high of a voltage into it.\nI adjusted the potentiometer to adjust the signal to well below 1 volt peak to peak (1 volt is line level input) and measured it with my oscilloscope prior to plugging it into a computer. Once all hooked up, I started audio recordings on the computer and played the individual sounds from the toy by pressing each button. It’s a bit of a hack solution but was good enough to get quality audio out of the toy.\nI’m putting these audio files up here in the hopes that someone will find them fun and do something with them.\nBird\nCat\nCow\nCoyote\nDog\nDuck\nFrog\nHorse\nPig\nRooster\nSheep\nTurkey\n","description":"Cheap hack to dump audio streams from toys.","id":2,"section":"posts","tags":["hardware hacking","hardware","electronics"],"title":"See ‘N Say Audio Files – Convert Speaker Output to Microphone Input","uri":"https://kevinneubauer.com/posts/see-n-say-audio-files-convert-speaker-output-to-microphone-input/"},{"content":"\nThere exists a black hole somewhere in between “I’m going to assemble those 30 boards by hand” and “I need to work directly with a fab in China to assemble hundreds of boards”. This “small business maker” market seems to have a lack of contract fabricators willing to assemble projects at a reasonable cost. Presumably, this market isn’t profitable for them due to the variability of each job and overhead of part orders and tooling changes.\nThere are a couple of well known domestic fabs that will work with you at these small volumes, but you will pay dearly working with them. For example, Macrofab has a very streamlined online ordering process and good customer service. However, they recently did away with their prototyping service. You can still order small volumes through them, but at an increase from what it used to cost. You also pay a higher fee if you want your project in a timely manner. Want it before a couple of months? It’ll cost you!\nCyber City Circuits Recently I had one of my social media contacts recommend working with Cyber City Circuits. Cyber City Circuits provides a complete turn-key service for electronics assembly. They are a small business based out of Augusta, GA.\nI had an order of 150 Circuit Brains Deluxe boards that I needed to fill and did not want to assemble them by hand so I reached out and requested a quote from Cyber City Circuits. I was happy I did. David from Cyber City Circuits reached out and took care of everything. We had an initial onboarding call to help them understand the project. They ordered all the PCBs and components. They communicated when there were component shortages or delays. During assembly, they flashed firmware on the boards and tested every board to ensure every microcontroller I/O pin worked. Then after assembly the boards were cleaned, packaged, labeled, and drop shipped to my customer. I never had to lay a finger on a board. Pricing was also completely reasonable considering all the services involved in the project.\nI’ve chosen to continue doing business with Cyber City Circuits and wanted to share my experience with them. Here are some highlight points from my first order with them.\nPositives: Turn key solution. Everything relating to assembly and product testing was included: Component ordering Assembly Firmware flashing (Firmware provided by me) Testing (Test script provided by me. First order test jig provided by Cyber City Circuits. Further orders I provided an improved test jig.) Excellent communication Asked questions to fully understand client and project needs Communicated delays due to holidays and supplier component shipping issues Pricing and quality are competitive with other domestic fab houses For this project pricing was slightly more expensive than ordering through Macrofab. However, you have to consider the following: Timing was faster. Macrofab charges a premium for bumping your order up in their queue. Firmware flashing and testing labor were included with Cyber City Circuits I received a fully finished and thoroughly tested product With other fab houses you may have to load firmware and perform final product testing Domestic (to the USA) No time zone or language barriers Maker partnership They care about and promote the maker community After fabrication, their website store can be used for order fulfillment Improvements: Could use a web portal for project collaboration Upload designs, renders or artwork \u0026amp; testing docs Share price quotes Eventually support an online ordering system as business demands dictate However, do not lose the personal touch of reaching out, communicating, and understanding the client and project needs Could use customer \u0026amp; project onboarding document templates Product description Order size Timeline desires Product test procedures Basic statement of work for who does what to ensure expectations are met CircuitBrains Deluxe You can order CircuitBrains Deluxe from the following storefronts:\nCrowd Supply Adafruit Digikey ","description":"Review of Cyber City Circuits assembly operation for small batch PCB assembly.","id":3,"section":"posts","tags":["hardware assembly","hardware","electronics"],"title":"Cyber City Circuits Assembly Service Review","uri":"https://kevinneubauer.com/posts/cyber-city-circuits-assembly-service-review/"},{"content":"\nOpen source and knowledge sharing are so important. They enable the community as a whole to efficiently learn and to improve on others work. After spending several hours figuring out how to panelize KiCad circuits for small production runs, I published this post and accompanying video then didn’t put a second thought into how I could make the process more efficient. However, thanks to knowledge sharing, tools and techniques improve over time. Nikki Smith of climbers.net.net watched my video and then automated a large chunk of the process with some clever scripting. The entire layout with rails, 3mm cutouts, mouse bite tabs, and stencil alignment holes can now be generated in a matter of seconds. If you have a square or rectangular board you want to panelize, you simply enter the dimensions, x and y count, and click download! Nikki’s script and process are documented here.\n","description":"Tutorial on how to panelize electronic circuit designs with Kicad.","id":4,"section":"posts","tags":["kicad","hardware","electronics","panelizing"],"title":"Update – Panelizing Your Circuit Design With KiCad","uri":"https://kevinneubauer.com/posts/panelizing-for-kicad/"},{"content":"\nI wanted to share the tools and techniques that I use to assemble my surface mount prototypes. The below video details all of the tools I use for initial assembly (not rework) and the steps taken. In putting this info out there, I hope to prevent some people from having some of the same learning curve headaches and issues that I had when first transitioning from through hole soldering to surface mount.\nEnjoy!\nBy the way, the board featured in this video is the CircuitBrains Deluxe. The final hours of its Crowd Supply campaign are running out. It’s so close to funding! If you would like to get your hands on one, go put in a pledge!\n","description":"Tutorial on assembling surface mount electronics.","id":5,"section":"posts","tags":["hardware assembly","hardware","electronics"],"title":"Surface Mount Electronics Prototype Assembly How-To","uri":"https://kevinneubauer.com/posts/surface-mount-electronics-prototype-assembly-how-to/"},{"content":"\nUpdate: For a super simple method of generating the panel framework, please see this blog post update.\nOriginal blog post below:\nRecently I had some Twitter followers ask me how I panelized my CircuitBrains Deluxe design for smaller home production runs. KiCad has little built-in support for panelizing so prepare for a little work getting set up. However, the good news is that you can put in a little work on getting a reference panel created for your design. Then if you make future revisions to your board, as long as you don’t change the outer edges of it, you can re-import your board into the reference panel and send it off to the fab house.\nIf you want to use the panelization footprints that I use, they are in my GitHub repo.\nThe steps to do this are best shown in a video so you can follow along. The important thing to remember when doing panelizing this way is to make sure you export the layers which contain instructions for where to cut out or mill internal to your panel and indicate to the fab house on their order form for where to find those instructions. If you don’t do this, you will end up with a solid panel with no internal cut outs. Check out the below video for details:\n","description":"Tutorial on how to panelize electronic circuit designs with Kicad.","id":6,"section":"posts","tags":["kicad","hardware","electronics","panelizing"],"title":"Panelizing Circuit Designs with Kicad","uri":"https://kevinneubauer.com/posts/panelizing-circuit-designs-with-kicad/"},{"content":"\nSummary: CircuitPython on an ARM Cortex M0 in 1 square inch! This “Just Add Solder” castellated module is perfect for incorporating into your own project. The CircuitBrains Basic board footprint is small enough to fit into narrow spaces and wearable projects.\nRolling your own microcontroller board is time consuming. You have to make sure your design has proper power, decoupling, flash storage, and clock. Then you source all of the parts. After that you lay out the PCB and have it fabricated. When the PCB and parts arrive, you have to deal with finicky small-pitch surface mount assembly. Finally, you need to download the sources for the UF2 bootloader and CircuitPython and define your board, compile, and flash. CircuitBrains Deluxe aims to save makers and hackers some time \u0026amp; frustration. Using it in your project is as simple as importing the footprint libraries, adding those libraries to your schematic and layout (along with your USB port of choice), and soldering it on once your board arrives.\nProject Status: Version 1.2 tested good for CircuitPython. Retired product.\nGoals: Reduce barriers to entry for custom CircuitPython-based boards \u0026amp; badges\nPackage CircuitPython into a small form-factor module that will add minimal dimensions to a parent project\nSpecs: Dimensions: 25 x 25 x 3.5 millimeters / 1 x 1 x 0.15 inches Atmel ATSAMD21E18 Microcontroller (32-bit ARM Cortex M0) 48 MHz 32 KB SRAM 256 KB Flash 4 MB SPI Flash Onboard 3.3V LDO Regulator Power and Status LEDs Breakouts for SPI and I2C Breakouts for 4 Analog and 8 Digital Inputs/Outputs Links: https://github.com/neubauek/CircuitBrains\nAdditional Photos: ","description":"CircuitPython on an ARM Cortex M0 in 1 square inch!","id":7,"section":"projects","tags":["CircuitPython","project","electronics","hardware"],"title":"CircuitBrains Basic","uri":"https://kevinneubauer.com/projects/circuitbrains-basic/"},{"content":"\nSummary: CircuitPython on an ARM Cortex M4 in almost 1 square inch! This “Just Add Solder” castellated module is perfect for incorporating into your own project. The CircuitBrains Deluxe board footprint is small enough to fit into narrow spaces and wearable projects. Rolling your own microcontroller board is time consuming. You have to make sure your design has proper power, decoupling, flash storage, and clock. Then you source all of the parts. After that you lay out the PCB and have it fabricated. When the PCB and parts arrive, you have to deal with finicky small-pitch surface mount assembly. Finally, you need to download the sources for the UF2 bootloader and CircuitPython and define your board, compile, and flash. CircuitBrains Deluxe aims to save makers and hackers some time \u0026amp; frustration. Using it in your project is as simple as importing the footprint libraries, adding those libraries to your schematic and layout (along with your USB port of choice), and soldering it on once your board arrives.\nProject Status: Version 1.3 tested good for CircuitPython. To purchase, see links in the Order section below.\nGoals: Reduce barriers to entry for custom CircuitPython-based boards \u0026amp; badges Package CircuitPython into a small form-factor module that will add minimal dimensions to a parent project Specs: Dimensions: 29 x 29 x 3.5 millimeters / 1.15 x 1.15 x 0.15 inches Atmel ATSAMD51J19A Microcontroller (32-bit ARM Cortex M4) 120 MHz 192 KB SRAM 512 KB Flash 8 MB SPI Flash Onboard 3.3V LDO Regulator Power and Status LEDs Breakouts for SPI and I2C Breakouts for 13 Analog and 19 Digital Inputs/Outputs Order: You can order CircuitBrains Deluxe from the following storefronts:\nCrowd Supply Adafruit Digikey Links: https://github.com/neubauek/CircuitBrains\nAdditional Photos: ","description":"CircuitPython on an ARM Cortex M4 in almost 1 square inch!","id":8,"section":"projects","tags":["CircuitPython","project","electronics","hardware"],"title":"CircuitBrains Deluxe","uri":"https://kevinneubauer.com/projects/circuitbrains-deluxe/"},{"content":"\nAfter having built my CircuitPython Badge, I needed a CircuitPython app to demo its capabilities. I decided that I would write a Tamagotchi-like clone, similar to the Tamaguino (for Arduino).\nThe little pet is capable of eating, getting agitated, playing a game, and yes, even pooping…\nAll of the audio and artwork assets are included and easily replaceable for those who want to create their own pet.\nThe source code is fully open source and published under the MIT license. Although I built this specific to my badge hardware, it could easily be ported to other hardware with a SH1106 or SD1306 display and 3 buttons. See my GitHub for the code.\nIf you want to modify the code, some basic guidelines are below:\nVirtualPet/lib/VirtualPetGame.py is the main game class file. Modify the code here to add new or change existing behaviors, change the mini game, or change the menu entries VirtualPet/lib/VirtualPet.py is the class file for the pet. This file contains variables for things like hunger rate, happiness rate, etc and some basic logic for pet lifecycle VirtualPet/assets is the directory that contains all of the game screens and audio files. All of the screens are mono-color graphics encoded in 1/0 format. The screens can be swapped out by drawing new pixel art on http://www.pixilart.com and then uploading them to https://www.dcode.fr/binary-image to do the 1/0 conversion. The audio files must follow CircuitPython audio file guidelines (PCM 16-bit Mono WAV file 22-kHz sample rate). See this Adafruit guide on how to convert your audio files ","description":"Tamagotchi-like virtual pet for my CircuitPython Badge.","id":9,"section":"projects","tags":["CircuitPython","project","electronics","Python","code"],"title":"CircuitPython Virtual Pet","uri":"https://kevinneubauer.com/projects/circuitpython-virtual-pet/"},{"content":"\nPurpose: An educational toy… No, really. That’s why I created it. That and to have something to break the ice at tech conferences that I go to. My badge is inspired by the Adafruit Circuit Playground Express, has some Adafruit HalloWing elements thrown in, plus a cheap OLED and the #BadgeLife SAO connector.\nFeatures: Runs Adafruit CircuitPython! Atmel ATSAMD51J19 ARM Cortex M4 microcontroller 8 MB flash storage Accelerometer Speaker/Buzzer SK6812 LEDs / Neopixels BadgeLife SAO connector Three buttons AA battery holder Bill of Materials: See the BOM XLSX and interactive HTML BOM within the “Kicad files” folder in my GitHub.\nLinks: My GitHub contains the hardware schematic and board layout in Kicad format The CircuitPython Virtual Pet program I wrote Additional Photos ","description":"CircuitPython badge with a Tamagotchi-like pet!","id":10,"section":"projects","tags":["CircuitPython","project","electronics","hardware"],"title":"CircuitPython Badge","uri":"https://kevinneubauer.com/projects/circuitpython-badge/"}]